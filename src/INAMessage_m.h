//
// Generated file, do not edit! Created by nedtool 5.6 from INAMessage.msg.
//

#ifndef __INAMESSAGE_M_H
#define __INAMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class INATypeMsg;
class INAUserMsgHeader;
class INAUpdateMsg;
class INAUserMsg_KDataMsg;
class INAUserMsg_KFeedbackMsg;
class INAUserMsg_KSummaryVectorMsg;
class INAUserMsg_KDataRequestMsg;
class INAUserMsg_KReactionMsg;
class INAUserMsg_KDPtableRequestMsg;
class INAUserMsg_KDPtableDataMsg;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "KOPSMsg_m.h" // import KOPSMsg

#include "KInternalMsg_m.h" // import KInternalMsg

/**
 * Class generated from <tt>INAMessage.msg:6</tt> by nedtool.
 * <pre>
 * class INATypeMsg extends inet::FieldsChunk
 * {
 *     int senderID;
 *     int msgKind;
 * }
 * </pre>
 */
class INATypeMsg : public ::inet::FieldsChunk
{
  protected:
    int senderID = 0;
    int msgKind = 0;

  private:
    void copy(const INATypeMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INATypeMsg&);

  public:
    INATypeMsg();
    INATypeMsg(const INATypeMsg& other);
    virtual ~INATypeMsg();
    INATypeMsg& operator=(const INATypeMsg& other);
    virtual INATypeMsg *dup() const override {return new INATypeMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSenderID() const;
    virtual void setSenderID(int senderID);
    virtual int getMsgKind() const;
    virtual void setMsgKind(int msgKind);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INATypeMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INATypeMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:11</tt> by nedtool.
 * <pre>
 * class INAUserMsgHeader extends inet::FieldsChunk
 * {
 *     int ptrType;
 * }
 * </pre>
 */
class INAUserMsgHeader : public ::inet::FieldsChunk
{
  protected:
    int ptrType = 0;

  private:
    void copy(const INAUserMsgHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUserMsgHeader&);

  public:
    INAUserMsgHeader();
    INAUserMsgHeader(const INAUserMsgHeader& other);
    virtual ~INAUserMsgHeader();
    INAUserMsgHeader& operator=(const INAUserMsgHeader& other);
    virtual INAUserMsgHeader *dup() const override {return new INAUserMsgHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPtrType() const;
    virtual void setPtrType(int ptrType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUserMsgHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUserMsgHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:15</tt> by nedtool.
 * <pre>
 * class INAUpdateMsg extends inet::FieldsChunk
 * {
 *     int16_t neighborCount;
 *     int neighborID[];
 *     bool ack[];
 *     string macAddress;
 * }
 * </pre>
 */
class INAUpdateMsg : public ::inet::FieldsChunk
{
  protected:
    int16_t neighborCount = 0;
    int *neighborID = nullptr;
    size_t neighborID_arraysize = 0;
    bool *ack = nullptr;
    size_t ack_arraysize = 0;
    omnetpp::opp_string macAddress;

  private:
    void copy(const INAUpdateMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUpdateMsg&);

  public:
    INAUpdateMsg();
    INAUpdateMsg(const INAUpdateMsg& other);
    virtual ~INAUpdateMsg();
    INAUpdateMsg& operator=(const INAUpdateMsg& other);
    virtual INAUpdateMsg *dup() const override {return new INAUpdateMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int16_t getNeighborCount() const;
    virtual void setNeighborCount(int16_t neighborCount);
    virtual void setNeighborIDArraySize(size_t size);
    virtual size_t getNeighborIDArraySize() const;
    virtual int getNeighborID(size_t k) const;
    virtual void setNeighborID(size_t k, int neighborID);
    virtual void insertNeighborID(int neighborID);
    virtual void insertNeighborID(size_t k, int neighborID);
    virtual void eraseNeighborID(size_t k);
    virtual void setAckArraySize(size_t size);
    virtual size_t getAckArraySize() const;
    virtual bool getAck(size_t k) const;
    virtual void setAck(size_t k, bool ack);
    virtual void insertAck(bool ack);
    virtual void insertAck(size_t k, bool ack);
    virtual void eraseAck(size_t k);
    virtual const char * getMacAddress() const;
    virtual void setMacAddress(const char * macAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUpdateMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUpdateMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:23</tt> by nedtool.
 * <pre>
 * class INAUserMsg_KDataMsg extends inet::FieldsChunk
 * {
 *     KDataMsg data;
 * }
 * </pre>
 */
class INAUserMsg_KDataMsg : public ::inet::FieldsChunk
{
  protected:
    KDataMsg data;

  private:
    void copy(const INAUserMsg_KDataMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUserMsg_KDataMsg&);

  public:
    INAUserMsg_KDataMsg();
    INAUserMsg_KDataMsg(const INAUserMsg_KDataMsg& other);
    virtual ~INAUserMsg_KDataMsg();
    INAUserMsg_KDataMsg& operator=(const INAUserMsg_KDataMsg& other);
    virtual INAUserMsg_KDataMsg *dup() const override {return new INAUserMsg_KDataMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const KDataMsg& getData() const;
    virtual KDataMsg& getDataForUpdate() { handleChange();return const_cast<KDataMsg&>(const_cast<INAUserMsg_KDataMsg*>(this)->getData());}
    virtual void setData(const KDataMsg& data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUserMsg_KDataMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUserMsg_KDataMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:28</tt> by nedtool.
 * <pre>
 * class INAUserMsg_KFeedbackMsg extends inet::FieldsChunk
 * {
 *     KFeedbackMsg data;
 * }
 * </pre>
 */
class INAUserMsg_KFeedbackMsg : public ::inet::FieldsChunk
{
  protected:
    KFeedbackMsg data;

  private:
    void copy(const INAUserMsg_KFeedbackMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUserMsg_KFeedbackMsg&);

  public:
    INAUserMsg_KFeedbackMsg();
    INAUserMsg_KFeedbackMsg(const INAUserMsg_KFeedbackMsg& other);
    virtual ~INAUserMsg_KFeedbackMsg();
    INAUserMsg_KFeedbackMsg& operator=(const INAUserMsg_KFeedbackMsg& other);
    virtual INAUserMsg_KFeedbackMsg *dup() const override {return new INAUserMsg_KFeedbackMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const KFeedbackMsg& getData() const;
    virtual KFeedbackMsg& getDataForUpdate() { handleChange();return const_cast<KFeedbackMsg&>(const_cast<INAUserMsg_KFeedbackMsg*>(this)->getData());}
    virtual void setData(const KFeedbackMsg& data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUserMsg_KFeedbackMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUserMsg_KFeedbackMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:33</tt> by nedtool.
 * <pre>
 * class INAUserMsg_KSummaryVectorMsg extends inet::FieldsChunk
 * {
 *     KSummaryVectorMsg data;
 * }
 * </pre>
 */
class INAUserMsg_KSummaryVectorMsg : public ::inet::FieldsChunk
{
  protected:
    KSummaryVectorMsg data;

  private:
    void copy(const INAUserMsg_KSummaryVectorMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUserMsg_KSummaryVectorMsg&);

  public:
    INAUserMsg_KSummaryVectorMsg();
    INAUserMsg_KSummaryVectorMsg(const INAUserMsg_KSummaryVectorMsg& other);
    virtual ~INAUserMsg_KSummaryVectorMsg();
    INAUserMsg_KSummaryVectorMsg& operator=(const INAUserMsg_KSummaryVectorMsg& other);
    virtual INAUserMsg_KSummaryVectorMsg *dup() const override {return new INAUserMsg_KSummaryVectorMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const KSummaryVectorMsg& getData() const;
    virtual KSummaryVectorMsg& getDataForUpdate() { handleChange();return const_cast<KSummaryVectorMsg&>(const_cast<INAUserMsg_KSummaryVectorMsg*>(this)->getData());}
    virtual void setData(const KSummaryVectorMsg& data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUserMsg_KSummaryVectorMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUserMsg_KSummaryVectorMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:38</tt> by nedtool.
 * <pre>
 * class INAUserMsg_KDataRequestMsg extends inet::FieldsChunk
 * {
 *     KDataRequestMsg data;
 * }
 * </pre>
 */
class INAUserMsg_KDataRequestMsg : public ::inet::FieldsChunk
{
  protected:
    KDataRequestMsg data;

  private:
    void copy(const INAUserMsg_KDataRequestMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUserMsg_KDataRequestMsg&);

  public:
    INAUserMsg_KDataRequestMsg();
    INAUserMsg_KDataRequestMsg(const INAUserMsg_KDataRequestMsg& other);
    virtual ~INAUserMsg_KDataRequestMsg();
    INAUserMsg_KDataRequestMsg& operator=(const INAUserMsg_KDataRequestMsg& other);
    virtual INAUserMsg_KDataRequestMsg *dup() const override {return new INAUserMsg_KDataRequestMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const KDataRequestMsg& getData() const;
    virtual KDataRequestMsg& getDataForUpdate() { handleChange();return const_cast<KDataRequestMsg&>(const_cast<INAUserMsg_KDataRequestMsg*>(this)->getData());}
    virtual void setData(const KDataRequestMsg& data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUserMsg_KDataRequestMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUserMsg_KDataRequestMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:43</tt> by nedtool.
 * <pre>
 * class INAUserMsg_KReactionMsg extends inet::FieldsChunk
 * {
 *     KReactionMsg data;
 * }
 * </pre>
 */
class INAUserMsg_KReactionMsg : public ::inet::FieldsChunk
{
  protected:
    KReactionMsg data;

  private:
    void copy(const INAUserMsg_KReactionMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUserMsg_KReactionMsg&);

  public:
    INAUserMsg_KReactionMsg();
    INAUserMsg_KReactionMsg(const INAUserMsg_KReactionMsg& other);
    virtual ~INAUserMsg_KReactionMsg();
    INAUserMsg_KReactionMsg& operator=(const INAUserMsg_KReactionMsg& other);
    virtual INAUserMsg_KReactionMsg *dup() const override {return new INAUserMsg_KReactionMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const KReactionMsg& getData() const;
    virtual KReactionMsg& getDataForUpdate() { handleChange();return const_cast<KReactionMsg&>(const_cast<INAUserMsg_KReactionMsg*>(this)->getData());}
    virtual void setData(const KReactionMsg& data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUserMsg_KReactionMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUserMsg_KReactionMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:48</tt> by nedtool.
 * <pre>
 * class INAUserMsg_KDPtableRequestMsg extends inet::FieldsChunk
 * {
 *     KDPtableRequestMsg data;
 * }
 * </pre>
 */
class INAUserMsg_KDPtableRequestMsg : public ::inet::FieldsChunk
{
  protected:
    KDPtableRequestMsg data;

  private:
    void copy(const INAUserMsg_KDPtableRequestMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUserMsg_KDPtableRequestMsg&);

  public:
    INAUserMsg_KDPtableRequestMsg();
    INAUserMsg_KDPtableRequestMsg(const INAUserMsg_KDPtableRequestMsg& other);
    virtual ~INAUserMsg_KDPtableRequestMsg();
    INAUserMsg_KDPtableRequestMsg& operator=(const INAUserMsg_KDPtableRequestMsg& other);
    virtual INAUserMsg_KDPtableRequestMsg *dup() const override {return new INAUserMsg_KDPtableRequestMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const KDPtableRequestMsg& getData() const;
    virtual KDPtableRequestMsg& getDataForUpdate() { handleChange();return const_cast<KDPtableRequestMsg&>(const_cast<INAUserMsg_KDPtableRequestMsg*>(this)->getData());}
    virtual void setData(const KDPtableRequestMsg& data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUserMsg_KDPtableRequestMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUserMsg_KDPtableRequestMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>INAMessage.msg:53</tt> by nedtool.
 * <pre>
 * class INAUserMsg_KDPtableDataMsg extends inet::FieldsChunk
 * {
 *     KDPtableDataMsg data;
 * }
 * </pre>
 */
class INAUserMsg_KDPtableDataMsg : public ::inet::FieldsChunk
{
  protected:
    KDPtableDataMsg data;

  private:
    void copy(const INAUserMsg_KDPtableDataMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const INAUserMsg_KDPtableDataMsg&);

  public:
    INAUserMsg_KDPtableDataMsg();
    INAUserMsg_KDPtableDataMsg(const INAUserMsg_KDPtableDataMsg& other);
    virtual ~INAUserMsg_KDPtableDataMsg();
    INAUserMsg_KDPtableDataMsg& operator=(const INAUserMsg_KDPtableDataMsg& other);
    virtual INAUserMsg_KDPtableDataMsg *dup() const override {return new INAUserMsg_KDPtableDataMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const KDPtableDataMsg& getData() const;
    virtual KDPtableDataMsg& getDataForUpdate() { handleChange();return const_cast<KDPtableDataMsg&>(const_cast<INAUserMsg_KDPtableDataMsg*>(this)->getData());}
    virtual void setData(const KDPtableDataMsg& data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INAUserMsg_KDPtableDataMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INAUserMsg_KDPtableDataMsg& obj) {obj.parsimUnpack(b);}

#endif // ifndef __INAMESSAGE_M_H

