//
// Generated file, do not edit! Created by nedtool 5.6 from MyPacket.msg.
//

#ifndef __MYPACKET_M_H
#define __MYPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class MyPacketType;
class MyPingPacket;
class MyPacket;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>MyPacket.msg:19</tt> by nedtool.
 * <pre>
 * class MyPacketType extends inet::FieldsChunk
 * {
 *     int16_t type;
 * }
 * </pre>
 */
class MyPacketType : public ::inet::FieldsChunk
{
  protected:
    int16_t type = 0;

  private:
    void copy(const MyPacketType& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyPacketType&);

  public:
    MyPacketType();
    MyPacketType(const MyPacketType& other);
    virtual ~MyPacketType();
    MyPacketType& operator=(const MyPacketType& other);
    virtual MyPacketType *dup() const override {return new MyPacketType(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int16_t getType() const;
    virtual void setType(int16_t type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyPacketType& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyPacketType& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MyPacket.msg:24</tt> by nedtool.
 * <pre>
 * class MyPingPacket extends inet::FieldsChunk
 * {
 *     int senderID;
 * }
 * </pre>
 */
class MyPingPacket : public ::inet::FieldsChunk
{
  protected:
    int senderID = 0;

  private:
    void copy(const MyPingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyPingPacket&);

  public:
    MyPingPacket();
    MyPingPacket(const MyPingPacket& other);
    virtual ~MyPingPacket();
    MyPingPacket& operator=(const MyPingPacket& other);
    virtual MyPingPacket *dup() const override {return new MyPingPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSenderID() const;
    virtual void setSenderID(int senderID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyPingPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyPingPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MyPacket.msg:29</tt> by nedtool.
 * <pre>
 * class MyPacket extends inet::FieldsChunk
 * {
 *     int senderID;
 *     int16_t dataLen;
 *     int data[];
 * }
 * </pre>
 */
class MyPacket : public ::inet::FieldsChunk
{
  protected:
    int senderID = 0;
    int16_t dataLen = 0;
    int *data = nullptr;
    size_t data_arraysize = 0;

  private:
    void copy(const MyPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyPacket&);

  public:
    MyPacket();
    MyPacket(const MyPacket& other);
    virtual ~MyPacket();
    MyPacket& operator=(const MyPacket& other);
    virtual MyPacket *dup() const override {return new MyPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSenderID() const;
    virtual void setSenderID(int senderID);
    virtual int16_t getDataLen() const;
    virtual void setDataLen(int16_t dataLen);
    virtual void setDataArraySize(size_t size);
    virtual size_t getDataArraySize() const;
    virtual int getData(size_t k) const;
    virtual void setData(size_t k, int data);
    virtual void insertData(int data);
    virtual void insertData(size_t k, int data);
    virtual void eraseData(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyPacket& obj) {obj.parsimUnpack(b);}

#endif // ifndef __MYPACKET_M_H

